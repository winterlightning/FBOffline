// Generated by CoffeeScript 1.3.3
(function() {
  var exports, feedHolder, listHolder,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Feed.fetch();

  FeedList.fetch();

  Image.fetch();

  Friends.fetch();

  Me.fetch();

  Feed.ordersort = function(a, b) {
    if (a.updated_time > b.updated_time) {
      return -1;
    } else {
      return 1;
    }
  };

  feedHolder = (function(_super) {

    __extends(feedHolder, _super);

    feedHolder.prototype.tag = "div.column";

    feedHolder.prototype.proxied = ["render", "addall", "remove"];

    feedHolder.prototype.events = {
      "click .bullhorn": "speak_all",
      "click .settings": "edit_settings",
      "click .eye": "toggle_watched"
    };

    feedHolder.prototype.elements = {
      ".holder": "holder",
      ".eye": "eye"
    };

    function feedHolder() {
      this.remove = __bind(this.remove, this);

      this.render = __bind(this.render, this);

      this.rerender = __bind(this.rerender, this);
      feedHolder.__super__.constructor.apply(this, arguments);
      this.item.bind("destroy", this.remove);
      this.item.bind("update", this.rerender);
      this.addall();
    }

    feedHolder.prototype.edit_settings = function() {
      var _this = this;
      console.log("settings");
      $("#dialog").dialog({
        autoOpen: true,
        width: 600,
        title: "Edit Column",
        modal: true,
        open: function() {
          $("#column_name").val(_this.item.name);
          $(".chzn-select").val(JSON.parse(_this.item.content));
          return $(".chzn-select").trigger("liszt:updated");
        },
        buttons: {
          Delete: function() {
            console.log("delete item called");
            _this.item.destroy();
            return $("#dialog").dialog("close");
          },
          Save: function() {
            return $(_this).dialog("close");
          },
          Cancel: function() {
            return $(this).dialog("close");
          }
        }
      });
      return $(".chzn-select").chosen();
    };

    feedHolder.prototype.speak_all = function() {
      return window.speak_all(this.item);
    };

    feedHolder.prototype.toggle_watched = function() {
      console.log("toggle watch called");
      this.item.watched = !this.item.watched;
      return this.item.save();
    };

    feedHolder.prototype.rerender = function() {
      this.render();
      return this.addall();
    };

    feedHolder.prototype.render = function() {
      var elements;
      this.item = FeedList.find(this.item.id);
      elements = $("#listTmpl").tmpl(this.item);
      this.el.html(elements);
      this.refreshElements();
      this.el.data("id", this.item.id);
      return this;
    };

    feedHolder.prototype.addall = function() {
      var feed, r, _i, _len, _ref, _results;
      console.log("add all");
      this.holder.html("");
      _ref = Feed.findAllByAttribute("tag", this.item.tag).sort(Feed.ordersort);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        feed = _ref[_i];
        r = $("#feedTmpl").tmpl(feed);
        _results.push(this.holder.append(r));
      }
      return _results;
    };

    feedHolder.prototype.remove = function() {
      this.el.remove();
      return $('#columns').width(FeedList.all().length * 344 + 20);
    };

    return feedHolder;

  })(Spine.Controller);

  listHolder = (function(_super) {

    __extends(listHolder, _super);

    listHolder.prototype.el = "#columns";

    listHolder.prototype.proxied = ["addone", "addall"];

    function listHolder() {
      listHolder.__super__.constructor.apply(this, arguments);
      this.addall();
    }

    listHolder.prototype.addall = function() {
      var feedList, list, _i, _len, _ref, _results;
      console.log("add all listall");
      this.el.html("");
      _ref = FeedList.all();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        feedList = _ref[_i];
        list = new feedHolder({
          item: feedList
        });
        this.el.append(list.render().el);
        _results.push(list.addall());
      }
      return _results;
    };

    listHolder.prototype.addone = function(list) {
      list = new feedHolder({
        item: list
      });
      $('#columns').width(FeedList.all().length * 344 + 20);
      this.el.append(list.render().el);
      return list.addall();
    };

    return listHolder;

  })(Spine.Controller);

  $(function() {
    var a, b, x, _i, _len, _ref;
    window.list_holder = new listHolder();
    if (localStorage.accessToken) {
      $("#loading").hide();
    }
    chrome.tts.stop();
    if (FeedList.all().length === 0) {
      a = FeedList.create({
        name: "Newfeed",
        "tag": "stream",
        "type": "newstream",
        "editable": false,
        "watched": true
      });
      b = FeedList.create({
        name: "Your Wall",
        "tag": "wall",
        "type": "wall",
        "editable": false,
        "watched": true
      });
      window.list_holder.addone(a);
      window.list_holder.addone(b);
    }
    _ref = Friends.all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      $("#friendpicker").append("<option value='" + x.id + "'>" + x.name + "</option>");
    }
    $(".chzn-select").chosen();
    $('#pane-target').width($(window).width());
    return $('#columns').width(FeedList.all().length * 344 + 20);
  });

  window.fb_selector = function() {
    $(".chzn-select").val("");
    return $("#dialog").dialog({
      autoOpen: true,
      width: 600,
      title: "Add Column",
      modal: true,
      open: function() {
        $(".chzn-select").val("");
        $(".chzn-select").trigger("liszt:updated");
        $(".chzn-select").blur();
        return $("#column_name").val("");
      },
      buttons: {
        Save: function() {
          window.add_column();
          return $("#dialog").dialog("close");
        },
        Cancel: function() {
          return $(this).dialog("close");
        }
      }
    });
  };

  window.add_column = function() {
    var a, f, id, name, url, user_ids, _i, _len, _ref, _results;
    console.log("called add column");
    name = $("#column_name").val();
    user_ids = $(".chzn-select").val();
    f = FeedList.create({
      name: name,
      tag: name,
      type: "friends",
      content: JSON.stringify(user_ids),
      "editable": true
    });
    window.list_holder.addone(f);
    _ref = $(".chzn-select").val();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      id = _ref[_i];
      url = "/" + id + "/feed";
      a = {
        url: url
      };
      console.log(url);
      _results.push(window.fb_call(a, suck_down_feed, name));
    }
    return _results;
  };

  window.refresh_feed = function() {
    var x, _i, _len, _ref, _results;
    _ref = FeedList.all();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      _results.push(window.refresh_column(x));
    }
    return _results;
  };

  window.stop_talking = function() {
    console.log("stop talking");
    return chrome.tts.stop();
  };

  window.logout = function() {
    localStorage.accessToken = "";
    $("#loading").show();
    return chrome.tabs.onUpdated.addListener(onFacebookLogin);
  };

  window.update_status_window = function() {
    console.log("update status window");
    return $("#dialog_status").dialog({
      autoOpen: true,
      width: 400,
      title: "Update Status",
      modal: true
    });
  };

  exports = this;

  exports.feedHolder = feedHolder;

}).call(this);
