// Generated by CoffeeScript 1.3.3
(function() {
  var $, Controller, DelayedOp, Events, Feed, FeedList, Friends, Image, Log, Me, Model, Module, Settings, Spine, createObject, exports, feedHolder, isArray, isBlank, listHolder, makeArray, moduleKeywords,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.successURL = "https://www.facebook.com/connect/login_success.html";

  window.onFacebookLogin = function() {
    console.log("onFacebookLogin called");
    if (!localStorage.accessToken) {
      return chrome.tabs.getAllInWindow(null, function(tabs) {
        var i, params, x;
        i = 0;
        while (i < tabs.length) {
          if (tabs[i].url.indexOf(successURL) === 0) {
            console.log("here", tabs[i]);
            params = tabs[i].url.split("#")[1];
            x = params.split("&")[0];
            localStorage.accessToken = x.split("=")[1];
            console.log(localStorage.accessToken);
            chrome.tabs.onUpdated.removeListener(onFacebookLogin);
            $("#loading").hide();
            chrome.tabs.remove(tabs[i].id);
            window.get_stream();
            window.get_wall();
            window.get_friends();
            window.get_me();
            return;
          }
          i++;
        }
      });
    }
  };

  window.update_ui_login = function(login) {
    if (login === true) {
      return console.log("login ui modifications");
    } else {
      return console.log("logout ui modifications");
    }
  };

  chrome.tabs.onUpdated.addListener(onFacebookLogin);

  window.fb_match = {
    profile: {
      url: "/me",
      method: "GET"
    },
    newsfeed: {
      url: "/me/home",
      method: "GET"
    },
    wall: {
      url: "/me/feed",
      method: "GET"
    },
    friends: {
      url: "/me/friends"
    },
    me: {
      url: "/me"
    }
  };

  window.fb_base = "https://graph.facebook.com";

  window.fb_call = function(obj, cb, tag) {
    var params;
    params = {};
    params.access_token = localStorage.accessToken;
    return $.getJSON("https://graph.facebook.com" + obj.url, params, function(res) {
      console.log(res);
      window.fb_data = res;
      if (cb != null) {
        if (tag != null) {
          return cb(res, tag);
        } else {
          return cb(res);
        }
      }
    });
  };

  window.like_obj = function(id) {
    var params, url;
    console.log("like obj");
    params = {};
    params.access_token = localStorage.accessToken;
    url = fb_base + ("/" + id + "/likes");
    return $.post(url, params, function(data) {
      return console.log("like done", data);
    });
  };

  window.comment_obj = function(id, message) {
    var params, url;
    console.log("comment obj");
    params = {};
    params.access_token = localStorage.accessToken;
    params.message = message;
    url = fb_base + ("/" + id + "/comments");
    return $.post(url, params, function(data) {
      return console.log("comment done", data);
    });
  };

  window.post_wall = function(id, message) {
    var params, url;
    console.log("comment obj");
    params = {};
    params.access_token = localStorage.accessToken;
    params.message = message;
    url = fb_base + ("/" + id + "/feed");
    return $.post(url, params, function(data) {
      return console.log("feed done", data);
    });
  };

  Events = {
    bind: function(ev, callback) {
      var calls, evs, name, _i, _len;
      evs = ev.split(' ');
      calls = this.hasOwnProperty('_callbacks') && this._callbacks || (this._callbacks = {});
      for (_i = 0, _len = evs.length; _i < _len; _i++) {
        name = evs[_i];
        calls[name] || (calls[name] = []);
        calls[name].push(callback);
      }
      return this;
    },
    one: function(ev, callback) {
      return this.bind(ev, function() {
        this.unbind(ev, arguments.callee);
        return callback.apply(this, arguments);
      });
    },
    trigger: function() {
      var args, callback, ev, list, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ev = args.shift();
      list = this.hasOwnProperty('_callbacks') && ((_ref = this._callbacks) != null ? _ref[ev] : void 0);
      if (!list) {
        return;
      }
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        callback = list[_i];
        if (callback.apply(this, args) === false) {
          break;
        }
      }
      return true;
    },
    unbind: function(ev, callback) {
      var cb, i, list, _i, _len, _ref;
      if (!ev) {
        this._callbacks = {};
        return this;
      }
      list = (_ref = this._callbacks) != null ? _ref[ev] : void 0;
      if (!list) {
        return this;
      }
      if (!callback) {
        delete this._callbacks[ev];
        return this;
      }
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        cb = list[i];
        if (!(cb === callback)) {
          continue;
        }
        list = list.slice();
        list.splice(i, 1);
        this._callbacks[ev] = list;
        break;
      }
      return this;
    }
  };

  Log = {
    trace: true,
    logPrefix: '(App)',
    log: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!this.trace) {
        return;
      }
      if (this.logPrefix) {
        args.unshift(this.logPrefix);
      }
      if (typeof console !== "undefined" && console !== null) {
        if (typeof console.log === "function") {
          console.log.apply(console, args);
        }
      }
      return this;
    }
  };

  moduleKeywords = ['included', 'extended'];

  Module = (function() {

    Module.include = function(obj) {
      var key, value, _ref;
      if (!obj) {
        throw new Error('include(obj) requires obj');
      }
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.extend = function(obj) {
      var key, value, _ref;
      if (!obj) {
        throw new Error('extend(obj) requires obj');
      }
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = obj.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.proxy = function(func) {
      var _this = this;
      return function() {
        return func.apply(_this, arguments);
      };
    };

    Module.prototype.proxy = function(func) {
      var _this = this;
      return function() {
        return func.apply(_this, arguments);
      };
    };

    function Module() {
      if (typeof this.init === "function") {
        this.init.apply(this, arguments);
      }
    }

    return Module;

  })();

  Model = (function(_super) {

    __extends(Model, _super);

    Model.extend(Events);

    Model.records = {};

    Model.crecords = {};

    Model.attributes = [];

    Model.configure = function() {
      var attributes, name;
      name = arguments[0], attributes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.className = name;
      this.records = {};
      this.crecords = {};
      if (attributes.length) {
        this.attributes = attributes;
      }
      this.attributes && (this.attributes = makeArray(this.attributes));
      this.attributes || (this.attributes = []);
      this.unbind();
      return this;
    };

    Model.toString = function() {
      return "" + this.className + "(" + (this.attributes.join(", ")) + ")";
    };

    Model.find = function(id) {
      var record;
      record = this.records[id];
      if (!record && ("" + id).match(/c-\d+/)) {
        return this.findCID(id);
      }
      if (!record) {
        throw new Error('Unknown record');
      }
      return record.clone();
    };

    Model.findCID = function(cid) {
      var record;
      record = this.crecords[cid];
      if (!record) {
        throw new Error('Unknown record');
      }
      return record.clone();
    };

    Model.exists = function(id) {
      try {
        return this.find(id);
      } catch (e) {
        return false;
      }
    };

    Model.refresh = function(values, options) {
      var record, records, _i, _len;
      if (options == null) {
        options = {};
      }
      if (options.clear) {
        this.records = {};
        this.crecords = {};
      }
      records = this.fromJSON(values);
      if (!isArray(records)) {
        records = [records];
      }
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        record.id || (record.id = record.cid);
        this.records[record.id] = record;
        this.crecords[record.cid] = record;
      }
      this.trigger('refresh', this.cloneArray(records));
      return this;
    };

    Model.select = function(callback) {
      var id, record, result;
      result = (function() {
        var _ref, _results;
        _ref = this.records;
        _results = [];
        for (id in _ref) {
          record = _ref[id];
          if (callback(record)) {
            _results.push(record);
          }
        }
        return _results;
      }).call(this);
      return this.cloneArray(result);
    };

    Model.findByAttribute = function(name, value) {
      var id, record, _ref;
      _ref = this.records;
      for (id in _ref) {
        record = _ref[id];
        if (record[name] === value) {
          return record.clone();
        }
      }
      return null;
    };

    Model.findAllByAttribute = function(name, value) {
      return this.select(function(item) {
        return item[name] === value;
      });
    };

    Model.each = function(callback) {
      var key, value, _ref, _results;
      _ref = this.records;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(callback(value.clone()));
      }
      return _results;
    };

    Model.all = function() {
      return this.cloneArray(this.recordsValues());
    };

    Model.first = function() {
      var record;
      record = this.recordsValues()[0];
      return record != null ? record.clone() : void 0;
    };

    Model.last = function() {
      var record, values;
      values = this.recordsValues();
      record = values[values.length - 1];
      return record != null ? record.clone() : void 0;
    };

    Model.count = function() {
      return this.recordsValues().length;
    };

    Model.deleteAll = function() {
      var key, value, _ref, _results;
      _ref = this.records;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(delete this.records[key]);
      }
      return _results;
    };

    Model.destroyAll = function() {
      var key, value, _ref, _results;
      _ref = this.records;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(this.records[key].destroy());
      }
      return _results;
    };

    Model.update = function(id, atts, options) {
      return this.find(id).updateAttributes(atts, options);
    };

    Model.create = function(atts, options) {
      var record;
      record = new this(atts);
      return record.save(options);
    };

    Model.destroy = function(id, options) {
      return this.find(id).destroy(options);
    };

    Model.change = function(callbackOrParams) {
      if (typeof callbackOrParams === 'function') {
        return this.bind('change', callbackOrParams);
      } else {
        return this.trigger('change', callbackOrParams);
      }
    };

    Model.fetch = function(callbackOrParams) {
      if (typeof callbackOrParams === 'function') {
        return this.bind('fetch', callbackOrParams);
      } else {
        return this.trigger('fetch', callbackOrParams);
      }
    };

    Model.toJSON = function() {
      return this.recordsValues();
    };

    Model.fromJSON = function(objects) {
      var value, _i, _len, _results;
      if (!objects) {
        return;
      }
      if (typeof objects === 'string') {
        objects = JSON.parse(objects);
      }
      if (isArray(objects)) {
        _results = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          value = objects[_i];
          _results.push(new this(value));
        }
        return _results;
      } else {
        return new this(objects);
      }
    };

    Model.fromForm = function() {
      var _ref;
      return (_ref = new this).fromForm.apply(_ref, arguments);
    };

    Model.recordsValues = function() {
      var key, result, value, _ref;
      result = [];
      _ref = this.records;
      for (key in _ref) {
        value = _ref[key];
        result.push(value);
      }
      return result;
    };

    Model.cloneArray = function(array) {
      var value, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        value = array[_i];
        _results.push(value.clone());
      }
      return _results;
    };

    Model.idCounter = 0;

    Model.uid = function(prefix) {
      var uid;
      if (prefix == null) {
        prefix = '';
      }
      uid = prefix + this.idCounter++;
      if (this.exists(uid)) {
        uid = this.uid(prefix);
      }
      return uid;
    };

    function Model(atts) {
      Model.__super__.constructor.apply(this, arguments);
      if (atts) {
        this.load(atts);
      }
      this.cid = this.constructor.uid('c-');
    }

    Model.prototype.isNew = function() {
      return !this.exists();
    };

    Model.prototype.isValid = function() {
      return !this.validate();
    };

    Model.prototype.validate = function() {};

    Model.prototype.load = function(atts) {
      var key, value;
      for (key in atts) {
        value = atts[key];
        if (typeof this[key] === 'function') {
          this[key](value);
        } else {
          this[key] = value;
        }
      }
      return this;
    };

    Model.prototype.attributes = function() {
      var key, result, _i, _len, _ref;
      result = {};
      _ref = this.constructor.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (key in this) {
          if (typeof this[key] === 'function') {
            result[key] = this[key]();
          } else {
            result[key] = this[key];
          }
        }
      }
      if (this.id) {
        result.id = this.id;
      }
      return result;
    };

    Model.prototype.eql = function(rec) {
      return !!(rec && rec.constructor === this.constructor && (rec.cid === this.cid) || (rec.id && rec.id === this.id));
    };

    Model.prototype.save = function(options) {
      var error, record;
      if (options == null) {
        options = {};
      }
      if (options.validate !== false) {
        error = this.validate();
        if (error) {
          this.trigger('error', error);
          return false;
        }
      }
      this.trigger('beforeSave', options);
      record = this.isNew() ? this.create(options) : this.update(options);
      this.trigger('save', options);
      return record;
    };

    Model.prototype.updateAttribute = function(name, value, options) {
      this[name] = value;
      return this.save(options);
    };

    Model.prototype.updateAttributes = function(atts, options) {
      this.load(atts);
      return this.save(options);
    };

    Model.prototype.changeID = function(id) {
      var records;
      records = this.constructor.records;
      records[id] = records[this.id];
      delete records[this.id];
      this.id = id;
      return this.save();
    };

    Model.prototype.destroy = function(options) {
      if (options == null) {
        options = {};
      }
      this.trigger('beforeDestroy', options);
      delete this.constructor.records[this.id];
      delete this.constructor.crecords[this.cid];
      this.destroyed = true;
      this.trigger('destroy', options);
      this.trigger('change', 'destroy', options);
      this.unbind();
      return this;
    };

    Model.prototype.dup = function(newRecord) {
      var result;
      result = new this.constructor(this.attributes());
      if (newRecord === false) {
        result.cid = this.cid;
      } else {
        delete result.id;
      }
      return result;
    };

    Model.prototype.clone = function() {
      return createObject(this);
    };

    Model.prototype.reload = function() {
      var original;
      if (this.isNew()) {
        return this;
      }
      original = this.constructor.find(this.id);
      this.load(original.attributes());
      return original;
    };

    Model.prototype.toJSON = function() {
      return this.attributes();
    };

    Model.prototype.toString = function() {
      return "<" + this.constructor.className + " (" + (JSON.stringify(this)) + ")>";
    };

    Model.prototype.fromForm = function(form) {
      var key, result, _i, _len, _ref;
      result = {};
      _ref = $(form).serializeArray();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        result[key.name] = key.value;
      }
      return this.load(result);
    };

    Model.prototype.exists = function() {
      return this.id && this.id in this.constructor.records;
    };

    Model.prototype.update = function(options) {
      var clone, records;
      this.trigger('beforeUpdate', options);
      records = this.constructor.records;
      records[this.id].load(this.attributes());
      clone = records[this.id].clone();
      clone.trigger('update', options);
      clone.trigger('change', 'update', options);
      return clone;
    };

    Model.prototype.create = function(options) {
      var clone, record;
      this.trigger('beforeCreate', options);
      if (!this.id) {
        this.id = this.cid;
      }
      record = this.dup(false);
      this.constructor.records[this.id] = record;
      this.constructor.crecords[this.cid] = record;
      clone = record.clone();
      clone.trigger('create', options);
      clone.trigger('change', 'create', options);
      return clone;
    };

    Model.prototype.bind = function(events, callback) {
      var binder, unbinder,
        _this = this;
      this.constructor.bind(events, binder = function(record) {
        if (record && _this.eql(record)) {
          return callback.apply(_this, arguments);
        }
      });
      this.constructor.bind('unbind', unbinder = function(record) {
        if (record && _this.eql(record)) {
          _this.constructor.unbind(events, binder);
          return _this.constructor.unbind('unbind', unbinder);
        }
      });
      return binder;
    };

    Model.prototype.one = function(events, callback) {
      var binder,
        _this = this;
      return binder = this.bind(events, function() {
        _this.constructor.unbind(events, binder);
        return callback.apply(_this, arguments);
      });
    };

    Model.prototype.trigger = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args.splice(1, 0, this);
      return (_ref = this.constructor).trigger.apply(_ref, args);
    };

    Model.prototype.unbind = function() {
      return this.trigger('unbind');
    };

    return Model;

  })(Module);

  Controller = (function(_super) {

    __extends(Controller, _super);

    Controller.include(Events);

    Controller.include(Log);

    Controller.prototype.eventSplitter = /^(\S+)\s*(.*)$/;

    Controller.prototype.tag = 'div';

    function Controller(options) {
      this.release = __bind(this.release, this);

      var key, value, _ref;
      this.options = options;
      _ref = this.options;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      if (!this.el) {
        this.el = document.createElement(this.tag);
      }
      this.el = $(this.el);
      this.$el = this.el;
      if (this.className) {
        this.el.addClass(this.className);
      }
      if (this.attributes) {
        this.el.attr(this.attributes);
      }
      if (!this.events) {
        this.events = this.constructor.events;
      }
      if (!this.elements) {
        this.elements = this.constructor.elements;
      }
      if (this.events) {
        this.delegateEvents(this.events);
      }
      if (this.elements) {
        this.refreshElements();
      }
      Controller.__super__.constructor.apply(this, arguments);
    }

    Controller.prototype.release = function() {
      this.trigger('release');
      this.el.remove();
      return this.unbind();
    };

    Controller.prototype.$ = function(selector) {
      return $(selector, this.el);
    };

    Controller.prototype.delegateEvents = function(events) {
      var eventName, key, match, method, selector, _results,
        _this = this;
      _results = [];
      for (key in events) {
        method = events[key];
        if (typeof method === 'function') {
          method = (function(method) {
            return function() {
              method.apply(_this, arguments);
              return true;
            };
          })(method);
        } else {
          if (!this[method]) {
            throw new Error("" + method + " doesn't exist");
          }
          method = (function(method) {
            return function() {
              _this[method].apply(_this, arguments);
              return true;
            };
          })(method);
        }
        match = key.match(this.eventSplitter);
        eventName = match[1];
        selector = match[2];
        if (selector === '') {
          _results.push(this.el.bind(eventName, method));
        } else {
          _results.push(this.el.delegate(selector, eventName, method));
        }
      }
      return _results;
    };

    Controller.prototype.refreshElements = function() {
      var key, value, _ref, _results;
      _ref = this.elements;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(this[value] = this.$(key));
      }
      return _results;
    };

    Controller.prototype.delay = function(func, timeout) {
      return setTimeout(this.proxy(func), timeout || 0);
    };

    Controller.prototype.html = function(element) {
      this.el.html(element.el || element);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.append = function() {
      var e, elements, _ref;
      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      elements = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          e = elements[_i];
          _results.push(e.el || e);
        }
        return _results;
      })();
      (_ref = this.el).append.apply(_ref, elements);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.appendTo = function(element) {
      this.el.appendTo(element.el || element);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.prepend = function() {
      var e, elements, _ref;
      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      elements = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          e = elements[_i];
          _results.push(e.el || e);
        }
        return _results;
      })();
      (_ref = this.el).prepend.apply(_ref, elements);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.replace = function(element) {
      var previous, _ref;
      _ref = [this.el, $(element.el || element)], previous = _ref[0], this.el = _ref[1];
      previous.replaceWith(this.el);
      this.delegateEvents(this.events);
      this.refreshElements();
      return this.el;
    };

    return Controller;

  })(Module);

  $ = (typeof window !== "undefined" && window !== null ? window.jQuery : void 0) || (typeof window !== "undefined" && window !== null ? window.Zepto : void 0) || function(element) {
    return element;
  };

  createObject = Object.create || function(o) {
    var Func;
    Func = function() {};
    Func.prototype = o;
    return new Func();
  };

  isArray = function(value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  };

  isBlank = function(value) {
    var key;
    if (!value) {
      return true;
    }
    for (key in value) {
      return false;
    }
    return true;
  };

  makeArray = function(args) {
    return Array.prototype.slice.call(args, 0);
  };

  Spine = this.Spine = {};

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Spine;
  }

  Spine.version = '1.0.8';

  Spine.isArray = isArray;

  Spine.isBlank = isBlank;

  Spine.$ = $;

  Spine.Events = Events;

  Spine.Log = Log;

  Spine.Module = Module;

  Spine.Controller = Controller;

  Spine.Model = Model;

  Module.extend.call(Spine, Events);

  Module.create = Module.sub = Controller.create = Controller.sub = Model.sub = function(instances, statics) {
    var result;
    result = (function(_super) {

      __extends(result, _super);

      function result() {
        return result.__super__.constructor.apply(this, arguments);
      }

      return result;

    })(this);
    if (instances) {
      result.include(instances);
    }
    if (statics) {
      result.extend(statics);
    }
    if (typeof result.unbind === "function") {
      result.unbind();
    }
    return result;
  };

  Model.setup = function(name, attributes) {
    var Instance;
    if (attributes == null) {
      attributes = [];
    }
    Instance = (function(_super) {

      __extends(Instance, _super);

      function Instance() {
        return Instance.__super__.constructor.apply(this, arguments);
      }

      return Instance;

    })(this);
    Instance.configure.apply(Instance, [name].concat(__slice.call(attributes)));
    return Instance;
  };

  Spine.Class = Module;

  Spine = this.Spine || require('spine');

  Spine.Model.Local = {
    extended: function() {
      this.change(this.saveLocal);
      return this.fetch(this.loadLocal);
    },
    saveLocal: function() {
      var result;
      result = JSON.stringify(this);
      return localStorage[this.className] = result;
    },
    loadLocal: function() {
      var result;
      result = localStorage[this.className];
      return this.refresh(result || [], {
        clear: true
      });
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Spine.Model.Local;
  }

  Feed = (function(_super) {

    __extends(Feed, _super);

    function Feed() {
      return Feed.__super__.constructor.apply(this, arguments);
    }

    Feed.configure("Feed", "id", "from&id", "from&name", "to&id", "to&name", "message", "type", "updated_time", "picture", "link", "story", "name", "tag", "unread");

    Feed.extend(Spine.Model.Local);

    return Feed;

  })(Spine.Model);

  FeedList = (function(_super) {

    __extends(FeedList, _super);

    function FeedList() {
      return FeedList.__super__.constructor.apply(this, arguments);
    }

    FeedList.configure("FeedList", "tag", "name", "icon", "content", "type", "watched", "editable");

    FeedList.extend(Spine.Model.Local);

    FeedList.extend(Spine.Events);

    return FeedList;

  })(Spine.Model);

  Image = (function(_super) {

    __extends(Image, _super);

    function Image() {
      return Image.__super__.constructor.apply(this, arguments);
    }

    Image.configure("Image", "image", "name", "id");

    Image.extend(Spine.Model.Local);

    return Image;

  })(Spine.Model);

  Friends = (function(_super) {

    __extends(Friends, _super);

    function Friends() {
      return Friends.__super__.constructor.apply(this, arguments);
    }

    Friends.configure("Friends", "name", "id");

    Friends.extend(Spine.Model.Local);

    return Friends;

  })(Spine.Model);

  Me = (function(_super) {

    __extends(Me, _super);

    function Me() {
      return Me.__super__.constructor.apply(this, arguments);
    }

    Me.configure("Me", "name", "id");

    Me.extend(Spine.Model.Local);

    return Me;

  })(Spine.Model);

  Settings = (function(_super) {

    __extends(Settings, _super);

    function Settings() {
      return Settings.__super__.constructor.apply(this, arguments);
    }

    Settings.configure("name", "value", "");

    Settings.extend(Spine.Model.Local);

    return Settings;

  })(Spine.Model);

  exports = this;

  this.Feed = Feed;

  this.FeedList = FeedList;

  this.Image = Image;

  this.Friends = Friends;

  this.Me = Me;

  this.Settings = Settings;

  window.suck_down_feed = function(json, tag) {
    var a, data, field, field_a, field_b, one, two, x, _i, _j, _len, _len1, _ref, _ref1;
    _ref = json.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      data = {};
      _ref1 = Feed.attributes;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        field = _ref1[_j];
        if (field.indexOf("&") === -1) {
          if (x[field] != null) {
            data[field] = x[field];
          }
        } else {
          field_a = field.split("&")[0];
          field_b = field.split("&")[1];
          if (x[field_a] != null) {
            one = x[field_a];
            if (one[field_b] != null) {
              data[field] = one[field_b];
            }
          }
          if (field_a === "to" && (x[field_a] != null)) {
            console.log("got here");
            one = x[field_a];
            two = one["data"][0];
            if (two[field_b] != null) {
              data[field] = two[field_b];
            }
          }
        }
      }
      if (tag != null) {
        data["tag"] = tag;
      }
      data["unread"] = true;
      if (Feed.findByAttribute("id", x["id"]) != null) {
        console.log(".");
      } else {
        Feed.create(data);
      }
    }
    if (FeedList.findByAttribute("tag", tag)) {
      a = FeedList.findByAttribute("tag", tag);
      a.save();
    }
    if (window.all_pulled != null) {
      return window.all_pulled.ok();
    }
  };

  window.suck_down_friends = function(json) {
    var data, field, x, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    _ref = json.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      data = {};
      _ref1 = Friends.attributes;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        field = _ref1[_j];
        if (x[field] != null) {
          data[field] = x[field];
        }
      }
      if (Friends.findByAttribute("id", x["id"]) != null) {
        console.log("this friend is already there");
      } else {
        Friends.create(data);
      }
    }
    _ref2 = Friends.all();
    _results = [];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      x = _ref2[_k];
      _results.push($("#friendpicker").append("<option value='" + x.id + "'>" + x.name + "</option>"));
    }
    return _results;
  };

  window.suck_down_me = function(data) {
    var a;
    if (Me.all().length === 0) {
      return Me.create({
        name: data.name,
        id: data.id
      });
    } else {
      a = Me.first();
      a.name = data.name;
      a.id = data.id;
      return a.save();
    }
  };

  window.get_stream = function() {
    console.log("all pulled", window.all_pulled);
    if (window.all_pulled != null) {
      window.all_pulled.wait();
    }
    return window.fb_call(fb_match.newsfeed, suck_down_feed, "stream");
  };

  window.get_wall = function() {
    if (window.all_pulled != null) {
      window.all_pulled.wait();
    }
    return window.fb_call(fb_match.wall, suck_down_feed, "wall");
  };

  window.get_friends = function() {
    if (window.all_pulled != null) {
      window.all_pulled.wait();
    }
    return window.fb_call(fb_match.friends, suck_down_friends);
  };

  window.get_me = function() {
    console.log("get me called");
    if (window.all_pulled != null) {
      window.all_pulled.wait();
    }
    return window.fb_call(fb_match.me, suck_down_me);
  };

  window.get_friend_list = function(feed_list) {
    var a, id, list, url, _i, _len, _results;
    console.log("all pulled", window.all_pulled);
    list = JSON.parse(feed_list.content);
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      id = list[_i];
      if (id === "") {
        _results.push(console.log("empty id, need to remove these"));
      } else {
        url = "/" + id + "/feed";
        a = {
          url: url
        };
        console.log("calling", url);
        if (window.all_pulled != null) {
          window.all_pulled.wait();
        }
        _results.push(window.fb_call(a, suck_down_feed, feed_list.tag));
      }
    }
    return _results;
  };

  window.refresh_column = function(feed_list) {
    console.log("refresh column called");
    switch (feed_list.type) {
      case "friends":
        return window.get_friend_list(feed_list);
      case "newstream":
        return window.get_stream();
      case "wall":
        return window.get_wall();
      case "messages":
        return console.log("messages");
      default:
        return console.log("feed_list is not suppose to be this type", feed_list.type);
    }
  };

  window.speak_feed = function(f) {
    var rate, speak, type;
    rate = Settings.find("speaking-speed").value;
    if (f.type === "status" || f.type === "video") {
      if (f.name != null) {
        speak = name;
      }
      if (f.message != null) {
        speak = f.message;
      }
      if (f.story != null) {
        speak = f.story;
      }
      if (f["to&name"] != null) {
        chrome.tts.speak(f["from&name"] + " said to " + f["to&name"] + " " + speak + ".", {
          'enqueue': true,
          'rate': rate
        });
        return console.log("SPEAKING:", f["from&name"] + " said to " + f["to&name"] + " " + speak + ".");
      } else {
        chrome.tts.speak(f["from&name"] + " said " + speak + ".", {
          'enqueue': true,
          'rate': rate
        });
        return console.log("SPEAKING:", f["from&name"] + " said " + speak + ".");
      }
    } else if (f.type === "link") {
      if (f.name != null) {
        speak = f.name;
      }
      if (f.story != null) {
        chrome.tts.speak(f.story + " " + f.name, {
          'enqueue': true
        });
        return console.log(f.story + " " + f.name);
      } else if (f["to&name"] != null) {
        chrome.tts.speak(f["from&name"] + " posted a link to " + f["to&name"] + " " + speak + ".", {
          'enqueue': true,
          'rate': rate
        });
        return console.log(f["from&name"] + " posted a link to " + f["to&name"] + " " + speak + ".");
      } else {
        chrome.tts.speak(f["from&name"] + " posted a link: " + speak + ".", {
          'enqueue': true,
          'rate': rate
        });
        return console.log("SPEAKING:", f["from&name"] + " said " + speak + ".");
      }
    } else if (f.type === "photo" || f.type === "swf") {
      if (f.type === "swf") {
        type = "flash";
      }
      if (f.type === "photo") {
        type = "photo";
      }
      if (f.message != null) {
        speak = f.message;
        chrome.tts.speak(f["from&name"] + (" posted a " + type + " with the message: ") + speak + ".", {
          'enqueue': true,
          'rate': rate
        });
        return console.log(f["from&name"] + (" posted a " + type + " with the message: ") + speak + ".", {
          'enqueue': true,
          'rate': rate
        });
      } else if (f.story != null) {
        speak = f.story;
        chrome.tts.speak(speak, {
          'enqueue': true,
          'rate': rate
        });
        return console.log(speak);
      }
    }
  };

  window.speak_all = function(feed_list) {
    var f, _i, _len, _ref, _results;
    chrome.tts.speak("starting");
    _ref = Feed.findAllByAttribute("tag", feed_list.tag).sort(Feed.ordersort);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      f = _ref[_i];
      _results.push(window.speak_feed(f));
    }
    return _results;
  };

  window.speak_all_feeds = function(feeds) {
    var f, _i, _len, _results;
    chrome.tts.speak("starting");
    _results = [];
    for (_i = 0, _len = feeds.length; _i < _len; _i++) {
      f = feeds[_i];
      _results.push(window.speak_feed(f));
    }
    return _results;
  };

  Feed.fetch();

  FeedList.fetch();

  Image.fetch();

  Friends.fetch();

  Me.fetch();

  Settings.fetch();

  Feed.ordersort = function(a, b) {
    if (a.updated_time > b.updated_time) {
      return -1;
    } else {
      return 1;
    }
  };

  window.REFRESH_TIME = 5;

  feedHolder = (function(_super) {

    __extends(feedHolder, _super);

    feedHolder.prototype.tag = "div.column";

    feedHolder.prototype.proxied = ["render", "addall", "remove"];

    feedHolder.prototype.events = {
      "click .bullhorn": "speak_all",
      "click .settings": "edit_settings",
      "click .eye": "toggle_watched"
    };

    feedHolder.prototype.elements = {
      ".holder": "holder",
      ".eye": "eye"
    };

    function feedHolder() {
      this.remove = __bind(this.remove, this);

      this.render = __bind(this.render, this);

      this.rerender = __bind(this.rerender, this);
      feedHolder.__super__.constructor.apply(this, arguments);
      this.item.bind("destroy", this.remove);
      this.item.bind("update", this.rerender);
      this.addall();
    }

    feedHolder.prototype.edit_settings = function() {
      var _this = this;
      console.log("settings");
      $("#dialog").dialog({
        autoOpen: true,
        width: 600,
        title: "Edit Column",
        modal: true,
        open: function() {
          $("#column_name").val(_this.item.name);
          $(".chzn-select").val(JSON.parse(_this.item.content));
          return $(".chzn-select").trigger("liszt:updated");
        },
        buttons: [
          {
            text: "Delete",
            "class": "btn btn-danger",
            click: function() {
              console.log("delete item called");
              _this.item.destroy();
              return $("#dialog").dialog("close");
            }
          }, {
            text: "Save",
            "class": "btn btn-primary",
            click: function() {
              if (_this.item.content !== JSON.stringify($(".chzn-select").val())) {
                _this.item.content = JSON.stringify($(".chzn-select").val());
                _this.item.name = $("#column_name").val();
                _this.item.save();
                window.refresh_column(_this.item);
              } else {
                _this.rerender();
              }
              return $("#dialog").dialog("close");
            }
          }, {
            text: "Cancel",
            "class": "btn",
            click: function() {
              return $(this).dialog("close");
            }
          }
        ]
      });
      return $(".chzn-select").chosen();
    };

    feedHolder.prototype.speak_all = function() {
      return window.speak_all(this.item);
    };

    feedHolder.prototype.toggle_watched = function() {
      console.log("toggle watch called");
      this.item.watched = !this.item.watched;
      return this.item.save();
    };

    feedHolder.prototype.rerender = function() {
      this.render();
      return this.addall();
    };

    feedHolder.prototype.render = function() {
      var elements;
      this.item = FeedList.find(this.item.id);
      elements = $("#listTmpl").tmpl(this.item);
      this.el.html(elements);
      this.refreshElements();
      this.el.data("id", this.item.id);
      return this;
    };

    feedHolder.prototype.addall = function() {
      var feed, r, _i, _len, _ref, _results;
      console.log("add all");
      this.holder.html("");
      _ref = Feed.findAllByAttribute("tag", this.item.tag).sort(Feed.ordersort);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        feed = _ref[_i];
        r = $("#feedTmpl").tmpl(feed);
        _results.push(this.holder.append(r));
      }
      return _results;
    };

    feedHolder.prototype.remove = function() {
      this.el.remove();
      return $('#columns').width(FeedList.all().length * 344 + 20);
    };

    return feedHolder;

  })(Spine.Controller);

  listHolder = (function(_super) {

    __extends(listHolder, _super);

    listHolder.prototype.el = "#columns";

    listHolder.prototype.proxied = ["addone", "addall"];

    function listHolder() {
      listHolder.__super__.constructor.apply(this, arguments);
      this.addall();
    }

    listHolder.prototype.addall = function() {
      var feedList, list, _i, _len, _ref, _results;
      console.log("add all listall");
      this.el.html("");
      _ref = FeedList.all();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        feedList = _ref[_i];
        list = new feedHolder({
          item: feedList
        });
        this.el.append(list.render().el);
        _results.push(list.addall());
      }
      return _results;
    };

    listHolder.prototype.addone = function(list) {
      list = new feedHolder({
        item: list
      });
      $('#columns').width(FeedList.all().length * 344 + 20);
      this.el.append(list.render().el);
      return list.addall();
    };

    return listHolder;

  })(Spine.Controller);

  $(function() {
    var a, b, x, _i, _len, _ref;
    window.list_holder = new listHolder();
    if (localStorage.accessToken) {
      $("#loading").hide();
    }
    chrome.tts.stop();
    if (FeedList.all().length === 0) {
      a = FeedList.create({
        name: "Newfeed",
        "tag": "stream",
        "type": "newstream",
        "editable": false,
        "watched": true
      });
      b = FeedList.create({
        name: "Your Wall",
        "tag": "wall",
        "type": "wall",
        "editable": false,
        "watched": true
      });
      window.list_holder.addone(a);
      window.list_holder.addone(b);
    }
    if (Settings.all().length === 0) {
      Settings.create({
        id: "auto-update",
        name: "auto-update",
        value: true
      });
      Settings.create({
        id: "speaking-speed",
        name: "speaking-speed",
        value: 1
      });
    }
    _ref = Friends.all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      $("#friendpicker").append("<option value='" + x.id + "'>" + x.name + "</option>");
    }
    $(".chzn-select").chosen();
    $('#pane-target').width($(window).width());
    $('#columns').width(FeedList.all().length * 344 + 20);
    window.initialize_autosync();
    $("#slider").slider({
      max: 2.5,
      min: 0.5,
      step: 0.5,
      value: 1.0
    });
    return window.clean_data();
  });

  window.initialize_autosync = function() {
    console.log("###autosync called");
    if (localStorage.accessToken && Settings.exists("auto-update") && Settings.find("auto-update").value) {
      window.auto_pull();
    }
    return setTimeout("window.initialize_autosync()", window.REFRESH_TIME * 60000);
  };

  window.fb_selector = function() {
    $(".chzn-select").val("");
    return $("#dialog").dialog({
      autoOpen: true,
      width: 600,
      title: "Add Column",
      modal: true,
      open: function() {
        $(".chzn-select").val("");
        $(".chzn-select").trigger("liszt:updated");
        $(".chzn-select").blur();
        return $("#column_name").val("");
      },
      buttons: [
        {
          text: "Save",
          "class": "btn btn-primary",
          click: function() {
            window.add_column();
            return $("#dialog").dialog("close");
          }
        }, {
          text: "Cancel",
          "class": "btn",
          click: function() {
            return $(this).dialog("close");
          }
        }
      ]
    });
  };

  window.settings_window = function() {
    return $("#dialog_settings").dialog({
      autoOpen: true,
      width: 400,
      title: "Settings",
      modal: true,
      open: function() {
        var a, b;
        if (Settings.exists("auto-update")) {
          a = Settings.find("auto-update");
          b = Settings.find("speaking-speed");
          $('#one').attr('checked', a.value);
          return $("#slider").slider({
            value: b.value
          });
        }
      },
      buttons: [
        {
          text: "Save",
          "class": "btn btn-primary",
          click: function() {
            var a, auto_update, speaking_speed;
            auto_update = $('#one').is(':checked');
            speaking_speed = $("#slider").slider("value");
            if (Settings.exists("auto-update")) {
              a = Settings.find("auto-update");
              a.value = auto_update;
              a.save();
            } else {
              Settings.create({
                id: "auto-update",
                name: "auto-update",
                value: auto_update
              });
            }
            if (Settings.exists("speaking-speed")) {
              a = Settings.find("speaking-speed");
              a.value = speaking_speed;
              a.save();
            } else {
              Settings.create({
                id: "speaking-speed",
                name: "speaking-speed",
                value: speaking_speed
              });
            }
            return $(this).dialog("close");
          }
        }, {
          text: "Cancel",
          "class": "btn",
          click: function() {
            return $(this).dialog("close");
          }
        }
      ]
    });
  };

  window.add_column = function() {
    var a, f, id, name, url, user_ids, _i, _len, _ref, _results;
    console.log("called add column");
    name = $("#column_name").val();
    user_ids = $(".chzn-select").val();
    f = FeedList.create({
      name: name,
      tag: name,
      type: "friends",
      content: JSON.stringify(user_ids),
      "editable": true
    });
    window.list_holder.addone(f);
    _ref = $(".chzn-select").val();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      id = _ref[_i];
      url = "/" + id + "/feed";
      a = {
        url: url
      };
      console.log(url);
      _results.push(window.fb_call(a, suck_down_feed, name));
    }
    return _results;
  };

  window.refresh_feed = function() {
    var x, _i, _len, _ref, _results;
    _ref = FeedList.all();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      _results.push(window.refresh_column(x));
    }
    return _results;
  };

  window.stop_talking = function() {
    console.log("stop talking");
    return chrome.tts.stop();
  };

  window.logout = function() {
    localStorage.accessToken = "";
    $("#loading").show();
    return chrome.tabs.onUpdated.addListener(onFacebookLogin);
  };

  window.update_status_window = function() {
    console.log("update status window");
    return $("#dialog_status").dialog({
      autoOpen: true,
      width: 400,
      title: "Update Status",
      modal: true,
      open: function() {
        return $("#dialog_status_textarea").val("");
      },
      buttons: [
        {
          text: "Update",
          "class": "btn btn-primary",
          click: function() {
            var a;
            a = $("#dialog_status_textarea").val();
            window.post_wall(Me.first().id, a);
            return $(this).dialog("close");
          }
        }, {
          text: "Cancel",
          "class": "btn",
          click: function() {
            return $(this).dialog("close");
          }
        }
      ]
    });
  };

  window.auto_pull = function() {
    var x, _i, _len, _ref;
    window.all_pulled = new DelayedOp(function() {
      var t, talk_feed, _i, _len;
      console.log("callback called");
      talk_feed = Feed.findAllByAttribute("unread", true).sort(Feed.ordersort);
      window.talk_feed = talk_feed;
      console.log("talk_feed", talk_feed);
      if ((talk_feed != null) && talk_feed.length > 0) {
        chrome.tts.speak("New updates");
        for (_i = 0, _len = talk_feed.length; _i < _len; _i++) {
          t = talk_feed[_i];
          window.speak_feed(t);
          t.unread = false;
          t.save();
        }
      }
      return window.all_pulled = null;
    });
    _ref = FeedList.findAllByAttribute("watched", true);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      window.refresh_column(x);
    }
    console.log("ALMOST READY");
    return window.all_pulled.ready();
  };

  window.clean_data = function() {
    var all_feeds, feed, list, _i, _len, _ref, _results;
    _ref = FeedList.all();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      list = _ref[_i];
      all_feeds = Feed.findAllByAttribute("tag", list.tag).sort(Feed.ordersort);
      if (all_feeds.length > 50) {
        console.log("greater than 50");
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = all_feeds.slice(49, all_feeds.length + 1 || 9e9);
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            feed = _ref1[_j];
            _results1.push(feed.destroy());
          }
          return _results1;
        })());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  exports = this;

  exports.feedHolder = feedHolder;

  DelayedOp = (function() {

    function DelayedOp(callback) {
      this.callback = callback;
      this.ready = __bind(this.ready, this);

      this.ok = __bind(this.ok, this);

      this.wait = __bind(this.wait, this);

      this.count = 1;
    }

    DelayedOp.prototype.wait = function() {
      return this.count++;
    };

    DelayedOp.prototype.ok = function() {
      if (!--this.count) {
        return this.callback();
      }
    };

    DelayedOp.prototype.ready = function() {
      return this.ok();
    };

    return DelayedOp;

  })();

  exports = this;

  exports.DelayedOp = DelayedOp;

}).call(this);
